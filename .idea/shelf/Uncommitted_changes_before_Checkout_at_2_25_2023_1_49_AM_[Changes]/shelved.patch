Index: cofcodeproject/lib/main.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\n\r\nvoid main() {\r\n  runApp(const MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  // This widget is the root of your application.\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'Flutter Demo',\r\n      theme: ThemeData(\r\n        // This is the theme of your application.\r\n        //\r\n        // Try running your application with \"flutter run\". You'll see the\r\n        // application has a blue toolbar. Then, without quitting the app, try\r\n        // changing the primarySwatch below to Colors.green and then invoke\r\n        // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\r\n        // or simply save your changes to \"hot reload\" in a Flutter IDE).\r\n        // Notice that the counter didn't reset back to zero; the application\r\n        // is not restarted.\r\n        primarySwatch: Colors.blue,\r\n      ),\r\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\r\n    );\r\n  }\r\n}\r\n\r\nclass MyHomePage extends StatefulWidget {\r\n  const MyHomePage({super.key, required this.title});\r\n\r\n  // This widget is the home page of your application. It is stateful, meaning\r\n  // that it has a State object (defined below) that contains fields that affect\r\n  // how it looks.\r\n\r\n  // This class is the configuration for the state. It holds the values (in this\r\n  // case the title) provided by the parent (in this case the App widget) and\r\n  // used by the build method of the State. Fields in a Widget subclass are\r\n  // always marked \"final\".\r\n\r\n  final String title;\r\n\r\n  @override\r\n  State<MyHomePage> createState() => _MyHomePageState();\r\n}\r\n\r\nclass _MyHomePageState extends State<MyHomePage> {\r\n  int _counter = 0;\r\n\r\n  void _incrementCounter() {\r\n    setState(() {\r\n      // This call to setState tells the Flutter framework that something has\r\n      // changed in this State, which causes it to rerun the build method below\r\n      // so that the display can reflect the updated values. If we changed\r\n      // _counter without calling setState(), then the build method would not be\r\n      // called again, and so nothing would appear to happen.\r\n      _counter++;\r\n    });\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // This method is rerun every time setState is called, for instance as done\r\n    // by the _incrementCounter method above.\r\n    //\r\n    // The Flutter framework has been optimized to make rerunning build methods\r\n    // fast, so that you can just rebuild anything that needs updating rather\r\n    // than having to individually change instances of widgets.\r\n    return SafeArea(\r\n      child: Scaffold(\r\n        appBar: AppBar(\r\n          // Here we take the value from the MyHomePage object that was created by\r\n          // the App.build method, and use it to set our appbar title.\r\n          title: Text(widget.title),\r\n        ),\r\n        body: Center(\r\n          // Center is a layout widget. It takes a single child and positions it\r\n          // in the middle of the parent.\r\n          child: Column(\r\n            // Column is also a layout widget. It takes a list of children and\r\n            // arranges them vertically. By default, it sizes itself to fit its\r\n            // children horizontally, and tries to be as tall as its parent.\r\n            //\r\n            // Invoke \"debug painting\" (press \"p\" in the console, choose the\r\n            // \"Toggle Debug Paint\" action from the Flutter Inspector in Android\r\n            // Studio, or the \"Toggle Debug Paint\" command in Visual Studio Code)\r\n            // to see the wireframe for each widget.\r\n            //\r\n            // Column has various properties to control how it sizes itself and\r\n            // how it positions its children. Here we use mainAxisAlignment to\r\n            // center the children vertically; the main axis here is the vertical\r\n            // axis because Columns are vertical (the cross axis would be\r\n            // horizontal).\r\n            mainAxisAlignment: MainAxisAlignment.center,\r\n            children: <Widget>[\r\n              const Text(\r\n                'You have pushed the button this many times:',\r\n              ),\r\n              Text(\r\n                '$_counter',\r\n                style: Theme.of(context).textTheme.headlineMedium,\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n        floatingActionButton: FloatingActionButton(\r\n          onPressed: _incrementCounter,\r\n          tooltip: 'Increment',\r\n          child: const Icon(Icons.add),\r\n        ), // This trailing comma makes auto-formatting nicer for build methods.\r\n      ),\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cofcodeproject/lib/main.dart b/cofcodeproject/lib/main.dart
--- a/cofcodeproject/lib/main.dart	
+++ b/cofcodeproject/lib/main.dart	
@@ -76,7 +76,7 @@
           // the App.build method, and use it to set our appbar title.
           title: Text(widget.title),
         ),
-        body: Center(
+        body:Center(
           // Center is a layout widget. It takes a single child and positions it
           // in the middle of the parent.
           child: Column(
